// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrendEmber.Data;

#nullable disable

namespace TrendEmber.Data.Migrations.TrendsDb
{
    [DbContext(typeof(TrendsDbContext))]
    [Migration("20250224191852_UpdateListEntities")]
    partial class UpdateListEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrendEmber.Core.Trends.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BasedOn")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Entry")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("StopLoss")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TG1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TG2")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TradeSetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TradeSetId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.TradeSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ImportedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TradeSets");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WatchList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ImportedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WatchList");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WatchListSymbol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WatchListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WatchListId");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.Trade", b =>
                {
                    b.HasOne("TrendEmber.Core.Trends.TradeSet", "TradeSet")
                        .WithMany("Trades")
                        .HasForeignKey("TradeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeSet");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WatchListSymbol", b =>
                {
                    b.HasOne("TrendEmber.Core.Trends.WatchList", null)
                        .WithMany("Symbols")
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.TradeSet", b =>
                {
                    b.Navigation("Trades");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WatchList", b =>
                {
                    b.Navigation("Symbols");
                });
#pragma warning restore 612, 618
        }
    }
}
