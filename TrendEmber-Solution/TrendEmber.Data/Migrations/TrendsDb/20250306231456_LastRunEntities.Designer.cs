// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrendEmber.Data;

#nullable disable

namespace TrendEmber.Data.Migrations.TrendsDb
{
    [DbContext(typeof(TrendsDbContext))]
    [Migration("20250306231456_LastRunEntities")]
    partial class LastRunEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrendEmber.Core.Trends.ApiProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiProviders");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.EquityPriceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ChartTime")
                        .HasColumnType("integer");

                    b.Property<decimal>("Close")
                        .HasColumnType("numeric");

                    b.Property<decimal>("High")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Low")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Open")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PriceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("RangeZScore")
                        .HasColumnType("double precision");

                    b.Property<decimal>("RawPriceDatee")
                        .HasColumnType("numeric");

                    b.Property<int?>("Shape")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VolumeWeighted")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Symbol", "PriceDate")
                        .HasDatabaseName("IX_Symbol_PriceDate");

                    b.ToTable("EquityPrices");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.HarvesterAgent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiProviderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiProviderId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.PriceGapEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Close")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ClosingEquityPriceHistoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<Guid?>("GapFilledPriceHistoryId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Open")
                        .HasColumnType("numeric");

                    b.Property<Guid>("OpeningEquityPriceHistoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClosingEquityPriceHistoryId");

                    b.HasIndex("GapFilledPriceHistoryId");

                    b.HasIndex("OpeningEquityPriceHistoryId");

                    b.ToTable("PriceGapEvents");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.ResistancePoints", b =>
                {
                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Resistance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("ResistancePointsView", (string)null);
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BasedOn")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Entry")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("StopLoss")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TG1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TG2")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TradeSetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TradeSetId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.TradeSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ImportedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TradeSets");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.TradeSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PriceHistoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("TradeType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PriceHistoryId");

                    b.ToTable("TradeSetups");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.TradeSetupSimulation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Entry")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Exit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ExitPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FirstResistance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FirstSupport")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SL")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SLPercentage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SecondResistance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SecondSupport")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TG1")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TG1Percentage")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TG2")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TG2Percentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TradeSetupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TradeSetupId");

                    b.ToTable("TradeSetupSimulations");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WatchList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HarvesterAgentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ImportedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HarvesterAgentId")
                        .IsUnique();

                    b.ToTable("WatchList");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WatchListSymbol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastImportedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("MeanRange")
                        .HasColumnType("double precision");

                    b.Property<double?>("StandardDeviation")
                        .HasColumnType("double precision");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WatchListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WatchListId");

                    b.ToTable("Symbols");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WavePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PriceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PriceHistoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymbolId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PriceHistoryId");

                    b.HasIndex("SymbolId");

                    b.ToTable("WavePoints");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WeeklyImport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImportStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RunFor")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("WeeklyImports");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.HarvesterAgent", b =>
                {
                    b.HasOne("TrendEmber.Core.Trends.ApiProvider", "ApiProvider")
                        .WithMany("Agents")
                        .HasForeignKey("ApiProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiProvider");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.PriceGapEvent", b =>
                {
                    b.HasOne("TrendEmber.Core.Trends.EquityPriceHistory", "ClosingPriceHistory")
                        .WithMany("ClosingPriceGapEvents")
                        .HasForeignKey("ClosingEquityPriceHistoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TrendEmber.Core.Trends.EquityPriceHistory", "GapFilledPriceHistory")
                        .WithMany("FilledGaps")
                        .HasForeignKey("GapFilledPriceHistoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TrendEmber.Core.Trends.EquityPriceHistory", "OpeningPriceHistory")
                        .WithMany("OpeningPriceGapEvents")
                        .HasForeignKey("OpeningEquityPriceHistoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClosingPriceHistory");

                    b.Navigation("GapFilledPriceHistory");

                    b.Navigation("OpeningPriceHistory");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.Trade", b =>
                {
                    b.HasOne("TrendEmber.Core.Trends.TradeSet", "TradeSet")
                        .WithMany("Trades")
                        .HasForeignKey("TradeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeSet");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.TradeSetup", b =>
                {
                    b.HasOne("TrendEmber.Core.Trends.EquityPriceHistory", "PriceHistory")
                        .WithMany("TradeSetUps")
                        .HasForeignKey("PriceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.TradeSetupSimulation", b =>
                {
                    b.HasOne("TrendEmber.Core.Trends.TradeSetup", "TradeSetup")
                        .WithMany("TradeSetupSimulations")
                        .HasForeignKey("TradeSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradeSetup");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WatchList", b =>
                {
                    b.HasOne("TrendEmber.Core.Trends.HarvesterAgent", "Agent")
                        .WithOne("WatchList")
                        .HasForeignKey("TrendEmber.Core.Trends.WatchList", "HarvesterAgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WatchListSymbol", b =>
                {
                    b.HasOne("TrendEmber.Core.Trends.WatchList", "WatchList")
                        .WithMany("Symbols")
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WatchList");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WavePoint", b =>
                {
                    b.HasOne("TrendEmber.Core.Trends.EquityPriceHistory", "PriceHistory")
                        .WithMany("WavePoints")
                        .HasForeignKey("PriceHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrendEmber.Core.Trends.WatchListSymbol", "Symbol")
                        .WithMany("WavePoints")
                        .HasForeignKey("SymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceHistory");

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.ApiProvider", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.EquityPriceHistory", b =>
                {
                    b.Navigation("ClosingPriceGapEvents");

                    b.Navigation("FilledGaps");

                    b.Navigation("OpeningPriceGapEvents");

                    b.Navigation("TradeSetUps");

                    b.Navigation("WavePoints");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.HarvesterAgent", b =>
                {
                    b.Navigation("WatchList")
                        .IsRequired();
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.TradeSet", b =>
                {
                    b.Navigation("Trades");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.TradeSetup", b =>
                {
                    b.Navigation("TradeSetupSimulations");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WatchList", b =>
                {
                    b.Navigation("Symbols");
                });

            modelBuilder.Entity("TrendEmber.Core.Trends.WatchListSymbol", b =>
                {
                    b.Navigation("WavePoints");
                });
#pragma warning restore 612, 618
        }
    }
}
